; Generated by SMPS2ASM Scripter beta 0.1
Ending_Header:
	sHeaderInit
	sHeaderTempo	$81, $10
	sHeaderCh	$05, $03
	sHeaderDAC	Ending_DAC1
	sHeaderDAC	Ending_DAC2
	sHeaderFM	Ending_FM1, $0D, $10
	sHeaderFM	Ending_FM2, $0D, $1B
	sHeaderFM	Ending_FM3, $01, $05
	sHeaderFM	Ending_FM4, $0D, $18
	sHeaderFM	Ending_FM5, $0D, $13
	sHeaderPSG	Ending_PSG1, $01, $08, $00, vNone
	sHeaderPSG	Ending_PSG2, $01, $08, $00, vNone
	sHeaderPSG	Ending_PSG3, $00, $20, $00, vNone

	; Patch $00
	; $3D
	; $01, $01, $12, $12,	$1F, $1F, $1F, $1F
	; $10, $06, $06, $06,	$01, $00, $00, $00
	; $30, $1A, $1A, $1A,	$0E, $80, $80, $80
	spAlgorithm	$05
	spFeedback	$07
	spDetune	$00, $01, $00, $01
	spMultiple	$01, $02, $01, $02
	spRateScale	$00, $00, $00, $00
	spAttackRt	$1F, $1F, $1F, $1F
	spAmpMod	$00, $00, $00, $00
	spSustainRt	$10, $06, $06, $06
	spSustainLv	$03, $01, $01, $01
	spDecayRt	$01, $00, $00, $00
	spReleaseRt	$00, $0A, $0A, $0A
	spSSGEG		$00, $00, $00, $00
	spTotalLv	$0E, $00, $00, $00

	; Patch $01
	; $00
	; $2A, $30, $30, $21,	$9F, $5F, $1F, $1F
	; $00, $0F, $01, $00,	$07, $00, $00, $0C
	; $0F, $4F, $FF, $0F,	$26, $30, $1D, $80
	spAlgorithm	$00
	spFeedback	$00
	spDetune	$02, $03, $03, $02
	spMultiple	$0A, $00, $00, $01
	spRateScale	$02, $00, $01, $00
	spAttackRt	$1F, $1F, $1F, $1F
	spAmpMod	$00, $00, $00, $00
	spSustainRt	$00, $01, $0F, $00
	spSustainLv	$00, $0F, $04, $00
	spDecayRt	$07, $00, $00, $0C
	spReleaseRt	$0F, $0F, $0F, $0F
	spSSGEG		$00, $00, $00, $00
	spTotalLv	$26, $1D, $30, $00

	; Patch $02
	; $3C
	; $71, $31, $12, $11,	$17, $1F, $19, $2F
	; $04, $01, $07, $01,	$00, $00, $00, $00
	; $F7, $F8, $F7, $F8,	$1D, $84, $19, $84
	spAlgorithm	$04
	spFeedback	$07
	spDetune	$07, $01, $03, $01
	spMultiple	$01, $02, $01, $01
	spRateScale	$00, $00, $00, $00
	spAttackRt	$17, $19, $1F, $0F
	spAmpMod	$00, $00, $00, $00
	spSustainRt	$04, $07, $01, $01
	spSustainLv	$0F, $0F, $0F, $0F
	spDecayRt	$00, $00, $00, $00
	spReleaseRt	$07, $07, $08, $08
	spSSGEG		$00, $00, $00, $00
	spTotalLv	$1D, $19, $04, $04

	; Patch $03
	; $04
	; $17, $03, $06, $74,	$5F, $5F, $5F, $5F
	; $00, $08, $00, $00,	$00, $00, $00, $0A
	; $0F, $FF, $0F, $0F,	$1C, $83, $23, $83
	spAlgorithm	$04
	spFeedback	$00
	spDetune	$01, $00, $00, $07
	spMultiple	$07, $06, $03, $04
	spRateScale	$01, $01, $01, $01
	spAttackRt	$1F, $1F, $1F, $1F
	spAmpMod	$00, $00, $00, $00
	spSustainRt	$00, $00, $08, $00
	spSustainLv	$00, $00, $0F, $00
	spDecayRt	$00, $00, $00, $0A
	spReleaseRt	$0F, $0F, $0F, $0F
	spSSGEG		$00, $00, $00, $00
	spTotalLv	$1C, $23, $03, $03

Ending_FM5:
	dc.b nRst, $0D
	saVol		$05

Ending_FM1:
	sVoice		$00
	sModAMPS	$13, $01, $06, $06
	saVol		$18
	dc.b nD3, $06, nA2
	saVol		$FD
	dc.b nD3, nFs3
	saVol		$FD
	dc.b nD3, nFs3
	saVol		$FD
	dc.b nA3, nFs3
	saVol		$FD
	dc.b nA3, nC4
	saVol		$FD
	dc.b nA3, nC4
	saVol		$FD
	dc.b nD4, nC4
	saVol		$FD
	dc.b nD4, nFs4
	saVol		$FD
	dc.b nBb3, $02, sHold, nB3, $04, nRst, $06, nB3
	dc.b $0C, nC4, $06, nRst, nC4, $0C, nD4, $0C
	dc.b nRst, nD4, $06, nRst, nBb3, $04, sHold, nB3
	dc.b $0E, nRst, $06, nB3, $0C, nC4, $06, nRst
	dc.b nD4, $12, nRst, $06, nCs4, nRst, nD4, $12
	dc.b nRst, $06
	saVol		$FE
	dc.b nF4, $0C, nRst, nF4, nRst, nF4, nE4, nF4
	dc.b $06, nRst
	saVol		$FE
	dc.b nFs4, $04

Ending_Loop1:
	saVol		$FF
	dc.b sHold, nG4, $17
	sLoop		$00, $04, Ending_Loop1
	sStop

Ending_FM2:
	sVoice		$00
	sModAMPS	$14, $01, $06, $06
	saVol		$18
	dc.b nA2, $06, nFs2
	saVol		$FD
	dc.b nA2, nC3
	saVol		$FD
	dc.b nA2, nC3
	saVol		$FD
	dc.b nD3, nC3
	saVol		$FD
	dc.b nD3, nFs3
	saVol		$FD
	dc.b nD3, nFs3
	saVol		$FD
	dc.b nA3, nFs3
	saVol		$FD
	dc.b nA3, nC4
	saVol		$FD
	dc.b nRst, $03, nG3, $06, nRst, nG3, $0C, nA3
	dc.b $06, nRst, nA3, $0C, nB3, $0C, nRst, nB3
	dc.b $06, nRst, nFs3, $04, sHold, nG3, $0E, nRst
	dc.b $06, nG3, $0C, nA3, $06, nRst, nB3, $12
	dc.b nRst, $06, nBb3, nRst, nB3, $12, nRst, $06
	saVol		$FE
	dc.b nC4, $0C, nRst, nC4, nRst, nC4, nB3, nA3
	dc.b $06, nRst
	saVol		$FE
	dc.b nBb3, $04

Ending_Loop2:
	saVol		$FF
	dc.b sHold, nB3, $17
	sLoop		$00, $04, Ending_Loop2
	sStop

Ending_FM3:
	sVoice		$03
	saTranspose	$0C
	saVol		$28
	dc.b nA2, $0C
	saVol		$FD
	dc.b nA2
	saVol		$FD
	dc.b nA2
	saVol		$FD
	dc.b nD3
	saVol		$FD
	dc.b nD3
	saVol		$FD
	dc.b nD3
	saVol		$FD
	dc.b nA3
	saVol		$FD
	dc.b nA3
	saVol		$ED
	saTranspose	$F4
	sVoice		$01
	sCall		Ending_Call1
	sCall		Ending_Call2
	dc.b nE2, $05, nRst, $01, $06
	sCall		Ending_Call3
	dc.b nA2, $05, nRst, $01, $06, nG2, $05, nRst
	dc.b $01, nG2, $05, nRst, $01, nG2, $05, nRst
	dc.b $01, $06, nG2, $05, nRst, $01, $06, nG2
	dc.b $05, nRst, $01, nG2, $05, nRst, $06, nG3
	dc.b $06, nRst, $01, nG2, $05, nRst, $07, nG3
	dc.b $0A, nRst, $08, nG2, $60
	sStop

Ending_FM4:
	dc.b nRst, $06
	sVoice		$03
	saVol		$10
	dc.b nFs2, $0C
	saVol		$FD
	dc.b nC3
	saVol		$FD
	dc.b nC3
	saVol		$FD
	dc.b nC3
	saVol		$FD
	dc.b nFs3
	saVol		$FD
	dc.b nFs3
	saVol		$FD
	dc.b nFs3
	saVol		$FD
	dc.b nC4, $06
	saVol		$05
	dc.b nRst, $03

Ending_Loop3:
	sCall		Ending_Call4
	sLoop		$00, $08, Ending_Loop3

Ending_Loop4:
	sCall		Ending_Call5
	sLoop		$00, $04, Ending_Loop4

Ending_Loop5:
	sCall		Ending_Call4
	sLoop		$00, $04, Ending_Loop5
	sPan		spLeft
	sStop

Ending_PSG1:
	dc.b nRst, $60
	sVolEnv		v0A
	dc.b nG3, nA3, nC4, nD4
	sStop

Ending_PSG2:
	dc.b nRst, $60
	sVolEnv		v0A
	dc.b nD3, nF3, nA3, nB3
	sStop

Ending_PSG3:
	dc.b nRst, $60
	sNoisePSG	snWhitePSG3
	sVolEnv		v02

Ending_Loop6:
	dc.b nHiHat, $06, $06
	saVol		-$20
	dc.b $06, $06
	saVol		$20
	dc.b $06, $06
	saVol		-$20
	dc.b $06, $06
	saVol		$20
	dc.b $06, $06
	saVol		-$20
	dc.b $06, $06
	saVol		$20
	dc.b $06, $06
	saVol		-$20
	dc.b $06, $06
	saVol		$20
	sLoop		$00, $03, Ending_Loop6
	dc.b $06, $06
	saVol		-$20
	dc.b $06, $06
	saVol		$20
	dc.b $06, $06
	saVol		-$20
	dc.b $06, $06
	saVol		$20
	dc.b $06, $06
	saVol		-$20
	dc.b $06, $06, $06, $06, $06, $06
	sStop

Ending_DAC1:
	sStop

Ending_DAC2:
	dc.b dCrashCymbal, $36, dSnare, $06, $0C, $0C, $06, dSnare
	dc.b dKick, $18, dSnare, dKick, dSnare, dKick, dSnare, dKick
	dc.b dSnare, $12, $06, dKick, $18, dSnare, dKick, dSnare
	dc.b dKick, dSnare, $12, $06, dKick, dSnare, dSnare, $0C
	dc.b $0C, $06, dCrashCymbal, $18
	sStop

	; but where did these routines come from? =/
Ending_Call1:
	dc.b nG2, $05, nRst, $01, nG2, $05, nRst, $01
	dc.b nG2, $05, nRst, $01, $06, nG2, $05, nRst
	dc.b $01, $06, nG2, $05, nRst, $01, nG2, $05
	dc.b nRst, $01, $06, nG2, $05, nRst, $01, nG2
	dc.b $05, nRst, $01, $06, nG2, $05, nRst, $01
	dc.b $06, nG2, $05, nRst, $01, $06
	sRet

Ending_Call2:
	dc.b nD2, $05, nRst, $01, nD2, $05, nRst, $01
	dc.b nD2, $05, nRst, $01, $06, nD2, $05, nRst
	dc.b $01, $06, nD2, $05, nRst, $01, nD2, $05
	dc.b nRst, $01, $06, nD2, $05, nRst, $01, nD2
	dc.b $05, nRst, $01, $06, nD2, $05, nRst, $01
	dc.b $06
	sRet

Ending_Call3:
	dc.b nF2, $05, nRst, $01, nF2, $05, nRst, $01
	dc.b nF2, $05, nRst, $01, $06, nF2, $05, nRst
	dc.b $01, $06, nF2, $05, nRst, $01, nF2, $05
	dc.b nRst, $01, $06, nF2, $05, nRst, $01, nF2
	dc.b $05, nRst, $01, $06, nF2, $05, nRst, $01
	dc.b $06
	sRet

Ending_Call4:
	dc.b nG4, $06, nF4, nD4, nF4
	sRet

Ending_Call5:
	dc.b nA4, $06, nG4, nE4, nG4
	sRet
